/*
** MyWidget version 1.0.
**
** Copyright (c) 2015 WidgetCo, Inc.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
*/

import React from "react";
import "./App.css";
import {
  AIServiceSpeechRealtimeApi,
  RealtimeParameters,
  RealtimeClientListener,
  RealtimeMessageAckAudio,
  RealtimeMessageResult,
  RealtimeParametersModelDomainEnum,
  RealtimeParametersStabilizePartialResultsEnum,
} from "oci-aispeech-realtime-web";

function App() {
  // Initialize the OCI Realtime Speech Web SDK
  const realtimeWebSocket = React.useRef<AIServiceSpeechRealtimeApi>();

  const [tokenDetails, setTokenDetails] = React.useState("");
  const [errors, setErrors] = React.useState([]);
  const [buttonState, setButtonState] = React.useState(false);

  // States to store results from the OCI Realtime Speech
  const [message, setMessage] = React.useState<RealtimeMessageResult>();
  const [resultStream, setResultStream] = React.useState([]);
  const [partialResult, setPartialResult] = React.useState("");
  const [finalResult, setFinalResult] = React.useState("");

  // States to store timings of various events
  const [startTime, setStartTime] = React.useState(0);
  const [tokenTime, setTokenTime] = React.useState(0);
  const [connectionTime, setConnectionTime] = React.useState(0);
  const [authTime, setAuthTime] = React.useState(0);

  /* CUSTOMER DEFINED API CALL
   *
   * Call the customer's server to get the region to which the websocket will connect to
   *
   */
  const getRegion = async () => {
    try {
      const response = await fetch("http://localhost:8448/region", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      const result = await response.text();
      console.log("Server Response:", JSON.parse(result));
      return JSON.parse(result);
    } catch (error) {
      console.error("Error in fetching region:", error);
      setErrors((prevErrors) => [...prevErrors, "Error in fetching region:" + JSON.stringify(error)]);
      return {};
    }
  };

  /* CUSTOMER DEFINED API CALL
   *
   * Call the customer's server to request a session token from the OCI Speech Service
   *
   */
  const authenticate = async () => {
    try {
      const response = await fetch("http://localhost:8448/authenticate", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.text();
        console.log("Server Response:", JSON.parse(result));
        return JSON.parse(result);
      } else {
        console.error("Error in fetching session token:", response);
        setErrors((prevErrors) => [...prevErrors, "Error in fetching session token: " + response.status + " " + response.statusText]);
        return {};
      }
    } catch (error) {
      console.error("Error in fetching session token:", error);
      setErrors((prevErrors) => [...prevErrors, "Error in fetching session token: " + JSON.stringify(error)]);
      return {};
    }
  };

  // Update the User Interface on each message received from the WebSocket
  React.useEffect(() => {
    if (message) {
      setResultStream((resultStream) => [message, ...resultStream]);
      let data = message;
      console.log(data);
      if (data && data.event === "RESULT") {
        let transcriptions = data.transcriptions;
        if (transcriptions[0].isFinal) {
          setFinalResult((finalResult) => finalResult + (finalResult.length > 0 ? " " : "") + transcriptions[0].transcription);
          setPartialResult("");
        } else {
          setPartialResult(transcriptions[0].transcription);
        }
      }
    }
  }, [message]);

  // Start the transcription session
  const startSession = async () => {
    reset();
    setStartTime(new Date().getTime());

    //use the same region as being used in the server for token generation
    const serviceRegion = (await getRegion()).region;

    // set the various parameters for the Realtime Speech session
    // Read more - https://docs.oracle.com/en-us/iaas/api/#/en/speech/20220101/datatypes/RealtimeParameters
    const realtimeClientParameters: RealtimeParameters = {
      customizations: [],
      languageCode: "en-US",
      modelDomain: RealtimeParametersModelDomainEnum.GENERIC,
      stabilizePartialResults: RealtimeParametersStabilizePartialResultsEnum.NONE,
      partialSilenceThresholdInMs: 0,
      finalSilenceThresholdInMs: 1000,
      shouldIgnoreInvalidCustomizations: false,
      encoding: "audio/raw;rate=16000",
    };

    // configure the EventListeners for various events emitted by the OCI Realtime Speech
    const realtimeEventListener: RealtimeClientListener = {
      // triggered when `isAckEnabled` parameter is set to true.
      onAckAudio(ackMessage: RealtimeMessageAckAudio) {},

      // triggered when connection with the service is established
      onConnect(openEvent) {
        setButtonState(true);
        setConnectionTime(new Date().getTime());
        console.log("WebSocket Client Connected");
      },

      // triggered when connection with the service is authenticated
      onConnectMessage(connectMessage) {
        console.log("WebSocket Client Authenticated: ", connectMessage);
        setResultStream([connectMessage, ...resultStream]);
        setAuthTime(new Date().getTime());
      },

      // triggered whenever there is an error
      onError(error) {
        setButtonState(false);
        setErrors((prevErrors) => [...prevErrors, error.name + " " + error.message]);
        console.error(error);
      },

      // triggered when a transcription result is received
      onResult(resultMessage) {
        console.log(resultMessage);
        setMessage(resultMessage);
      },

      // triggered when a session is closed for some reason
      onClose(closeEvent) {
        setButtonState(false);
        console.log("WebSocket server closed: ", closeEvent.code, closeEvent.reason);
      },
    };

    // fetch the session token from the customer's server and
    // only then proceed to start the session with OCI Realtime Speech
    authenticate().then((tokenObject) => {
      console.log("Token received", tokenObject);
      setTokenTime(new Date().getTime());
      if (tokenObject.sessionId === undefined) {
        setTokenDetails(JSON.stringify(tokenObject, undefined, 4));
        stopSession();
        return;
      }
      setTokenDetails(JSON.stringify(tokenObject, undefined, 4));

      // configure the Realtime Speech client with Parameters, Token and EventListener
      realtimeWebSocket.current = new AIServiceSpeechRealtimeApi(
        realtimeEventListener,
        tokenObject.token,
        tokenObject.compartmentId,
        `wss://realtime.aiservice.${serviceRegion}.oci.oraclecloud.com/ws/transcribe/stream`,
        realtimeClientParameters
      );

      // connect to the Realtime Speech service
      realtimeWebSocket.current.connect();
    });
  };

  // Stop the transcription session
  const stopSession = () => {
    try {
      realtimeWebSocket.current.close();
    } catch (e) {
      console.error(e);
    }
  };

  // Request the service to send the final result
  const requestFinalResult = () => {
    realtimeWebSocket.current && realtimeWebSocket.current.requestFinalResult();
  };

  // Reset the elements on the screen
  const reset = () => {
    setAuthTime(0);
    setConnectionTime(0);
    setTokenTime(0);
    setStartTime(0);
    setFinalResult("");
    setPartialResult("");
    setMessage(undefined);
    setResultStream([]);
    setTokenDetails("");
    setErrors([]);
  };

  // Render a very simple UI for showcasing OCI Realtime Speech Service
  return (
    <div className="App">
      <div>
        <h1>OCI Realtime Speech</h1>
        <h4>Web SDK client example</h4>
        <span>
          {/* Start and stop the session */}
          <button
            onClick={() => {
              return buttonState ? stopSession() : startSession();
            }}>
            {buttonState ? "Stop Session" : "Start session"}
          </button>

          {/* Request the service to send the final result */}
          <button onClick={requestFinalResult}>{"Request final result"}</button>

          {/* Clear the screen and stop the session */}
          <button
            onClick={() => {
              buttonState && stopSession();
              reset();
            }}>
            {"Clear screen"}
          </button>
        </span>
      </div>
      <hr />

      {/* Displays the timings of various events involved
       * in a successful Realtime Speech connection */}
      {startTime > 0 && (
        <>
          <h6>
            <pre>Start time - {new Date(startTime).toLocaleString()}</pre>
            {tokenTime > 0 && (
              <pre>
                Token received - {new Date(tokenTime).toLocaleString()} (+ {tokenTime - startTime} ms)
              </pre>
            )}
            {connectionTime > 0 && (
              <pre>
                Websocket connected - {new Date(connectionTime).toLocaleString()} (+ {connectionTime - tokenTime} ms)
              </pre>
            )}
            {authTime > 0 && (
              <pre>
                Realtime authenticated - {new Date(authTime).toLocaleString()} (+ {authTime - connectionTime} ms)
              </pre>
            )}
          </h6>
        </>
      )}

      {/* Display the errors */}
      {errors?.length > 0 && (
        <>
          <h4>Errors</h4>
          <pre>{errors}</pre>
        </>
      )}

      {/* Display the token details as returned from
       * the customer's server via the /authenticate GET call
       * which in turn are returned by OCI Speech Service's
       * `createRealtimeSessionToken` API */}
      {tokenDetails && (
        <>
          <h4>Token Details</h4>
          <pre>{tokenDetails}</pre>
        </>
      )}

      {/* Display the transcriptions returned by the service.
       * Partial transcriptions are italicized where as
       * finalized transcriptions are in regular font.
       */}
      {resultStream.length > 0 && (
        <>
          <h4>Transcriptions</h4>
          <pre style={{ textWrap: "pretty" }}>
            {finalResult + (finalResult.length > 0 ? " " : "")}
            <em>{partialResult}</em>
          </pre>
        </>
      )}

      {/* Display raw messages coming from the websocket connection */}
      {resultStream.length > 0 && (
        <>
          <h4>Websocket Messages</h4>
          <pre>{JSON.stringify(resultStream, undefined, 4)}</pre>
        </>
      )}
    </div>
  );
}

export default App;
