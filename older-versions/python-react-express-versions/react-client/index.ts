import express from "express";
import cors from "cors";
import bodyParser from "body-parser";
import * as common from "oci-common";
import * as aispeech from "oci-aispeech";
import https from 'https';
import fs from 'fs';

const app = express();
const port = 8448;

// SSL Certificate options with specified paths
const options = {
  key: fs.readFileSync('C:\\aiholo-app\\localhost-key.pem'),  // Path to your private key
  cert: fs.readFileSync('C:\\aiholo-app\\localhost.pem')       // Path to your certificate
};

// Configure CORS to allow requests from your specific client origin
// app.use(cors({
//     origin: 'http://130.61.51.75:4884', // Adjust this to match the origin you are accessing the server from
//     credentials: true // Allows cookies and credentials to be sent along with the requests
// }));

app.use(cors({
  origin: ['https://130.61.51.75:4884'],
  credentials: true,
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));


// The OCID of the compartment for authentication and authorization
const compartmentId = "ocid1.compartment.oc1..aaaaaaaafnah3ogykjsg34qruhixhb2drls6zhsejzm7mubi2i5qj66slcoq";

// Set the region for OCI services
const region = "us-phoenix-1";
const provider = new common.SessionAuthDetailProvider("C:/Users/opc/.oci/config", "MYSPEECHAIPROFILE");
// const provider = new common.ConfigFileAuthenticationDetailsProvider("C:/Users/opc/.oci/config", "DEFAULT");

/**
 * Generates a real-time session token using Oracle Cloud Infrastructure (OCI) AI Speech Service.
 * Configures the OCI client with a specific region and compartment ID, then requests a real-time session token.
 *
 * @returns {Promise<string>} The real-time session token generated by the AI Speech Service.
 * @throws {Error} If the request to generate the session token fails.
 */
async function getRealtimeToken() {
    provider.setRegion(region);
    const speechClient = new aispeech.AIServiceSpeechClient({ authenticationDetailsProvider: provider });

    const createRealtimeSessionTokenDetails = {
        compartmentId: compartmentId,
    };

    const createRealtimeSessionTokenRequest: aispeech.requests.CreateRealtimeSessionTokenRequest = {
        createRealtimeSessionTokenDetails: createRealtimeSessionTokenDetails,
    };

    const createRealtimeSessionTokenResponse = await speechClient.createRealtimeSessionToken(createRealtimeSessionTokenRequest);
    console.log("Token generated: ", createRealtimeSessionTokenResponse);
    return createRealtimeSessionTokenResponse.realtimeSessionToken;
}

app.use(bodyParser.json());

app.get("/authenticate", async (req, res) => {
    try {
        const token = await getRealtimeToken();
        console.log("Token Response: ", token);
        res.send(token);
    } catch (error) {
        console.error("createRealtimeSessionToken Failed with error: ", error);
        res.status(500).send(error.toString());
    }
});

app.get("/region", (req, res) => {
    console.log('Received headers:', req.headers);
    res.send({ region: region });
});

// Using HTTPS server instead of the standard HTTP server
https.createServer(options, app).listen(port, '0.0.0.0', () => {
    console.log(`https server running at https://0.0.0.0:${port}`);
});
